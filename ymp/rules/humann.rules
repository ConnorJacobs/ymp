## rules for Huttenhower lab tools

localrules: human_db_download
rule human_db_download:
    """
    Download Humann2 reference databases
    """
    output: "{:dir.references:}/humann2/{database}.{build}"
    wildcard_constraints:
      database = "[^.]*",
      build = "[^.]*"
    threads: 1
    conda: srcdir("hhtools.yml")
    shell: """
    humann2_databases --download {wildcards.database} {wildcards.build} {output}
    """
ruleorder: human_db_download > gunzip

rule humann2:
    """
    Humann2 does not support paired end
    """
    input:
        reads      = "{dir}/{sample}.{:pairnames:}.fq.gz",
        chocophlan = "{:dir.references:}/humann2/chocophlan.full",
        uniref     = "{:dir.references:}/humann2/uniref.uniref90_diamond",
        metaphlan  = "{dir}.metaphlan2/{sample}_profile.txt"
    output:
        genefam   = "{dir}.humann2/{sample}_genefamilies.tsv",
        pathabu   = "{dir}.humann2/{sample}_pathabundance.tsv",
        pathcov   = "{dir}.humann2/{sample}_pathcoverage.tsv",
        tempdir   = "{dir}.humann2/{sample}_humann2_temp"
    params:
        outpath   = "{dir}.humann2",
        mem       = icfg.mem("128G")
    log:
                    "{dir}.humann2/{sample}.log"
    threads: 16
    conda: srcdir("hhtools.yml")
    shell:
        "mkdir -p {output.tempdir};"
        "cat {input.reads} > {output.tempdir}/temp.fq.gz;"
        "humann2"
        " --input-format fastq.gz"
        " --input {output.tempdir}/temp.fq.gz"
        " --taxonomic-profile {input.metaphlan}"
        " --output-basename {wildcards.sample}"
        " --output {params.outpath}"
        " --nucleotide-database {input.chocophlan}/chocophlan"
        " --protein-database {input.uniref}/uniref"
        " --threads {threads};"
        " --o-log {log};"
        "rm {output.tempdir}/temp.fq.gz;"


localrules: humann2_renorm_table
rule humann2_renorm_table:
    message:
        "HUMANn2: renormalizing table {input} to {wildcards.unit}/{wildcards.mode}"
    input:
        "{dir}.humann2/{sample}_{type}.tsv"
    wildcard_constraints:
        type = "(genefamilies|pathabundance|pathcoverage)",
        unit = "(cpm|relab)",
        mode = "(community|levelwise)"
    output:
        "{dir}.humann2/{sample}_{type}_{mode}_{unit}_single.tsv"
    log:
        "{dir}.humann2/{sample}_{type}_{mode}_{unit}_single.log"
    params:
        special = "y"
    conda:
        srcdir("hhtools.yml")
    shell:
        "humann2_renorm_table"
        " --input {input}"
        " --output {output}"
        " --units {wildcards.unit}"
        " --mode {wildcards.mode}"
        " --special {params.special}"
        " --update-snames"
        " >{log} 2>&1"


localrules: humann2_join_tables
rule humann2_join_tables:
    message:
        "HUMANn2: joining tables into {output}"
    input:
        "{dir}.humann2/{:runs:}_{type}_{mode}_{unit}_single.tsv"
    wildcard_constraints:
        type = "(genefamilies|pathabundance|pathcoverage)",
        unit = "(cpm|relab)",
        mode = "(community|levelwise)"
    params:
        pattern = "{type}_{mode}_{unit}_single.tsv"
    output:
        "{dir}.humann2/{type}_{mode}_{unit}.tsv"
    conda:
        srcdir("hhtools.yml")
    shell:
        "humann2_join_tables"
        " --input {wildcards.dir}.humann2"
        " --file_name {params.pattern}"
        " --output {output}"

localrules: humann2_all
rule humann2_all:
    message:
        "HUMANn2: Finished processing {wildcards.dir}/humann2"
    input: expand("{{dir}}.humann2/{type}_{mode}_{unit}.tsv", \
                  type=("genefamilies","pathabundance","pathcoverage"), \
                  mode=("community", "levelwise"), \
                  unit=("cpm", "relab"))
    output: touch("{dir}.humann2/all")


rule metaphlan2_map:
    """
    """
    message: ""
    input:   fq = "{dir}/{sample}.{:pairnames:}.fq.gz",
             ref = "{:dir.references:}/metaphlan/db_v20"
    output:  "{dir}.metaphlan2/{sample}.bam"
    log:     "{dir}.metaphlan2/{sample}.bam.log"
    conda:   srcdir("bowtie2.yml")
    threads: 16
    params:  bt2_base = "{input.ref}/mpa_v20_m200",
             mem=icfg.mem("128G")
    shell: """
    bowtie2 \
    --threads {threads} \
    -x {params.bt2_base} \
    --no-unal \
    --very-sensitive \
    -U {input.fq[0]} -U {input.fq[1]} \
    2>{log} \
    | samtools view -b -o {output} -
    """

localrules: metaphlan2
rule metaphlan2:
    """
    """
    message: ""
    input:  bam = "{dir}.metaphlan2/{sample}.bam",
            ref = "{:dir.references:}/metaphlan/db_v20"
    output:       "{dir}.metaphlan2/{sample}_profile.txt"
    log:          "{dir}.metaphlan2/{sample}_profile.log"
    params: mka = "{input.ref}/mpa_v20_m200.pkl"
    conda: srcdir("hhtools.yml")
    threads: 1
    shell: """
    samtools view {input.bam} | \
    metaphlan2.py \
    --mpa_pkl {params.mka} \
    --input_type sam \
    -o {output} \
    --nproc {threads} \
    --sample_id {wildcards.sample} \
    >{log} 2>&1
    """

localrules: metaphlan2_merge
rule metaphlan2_merge:
    """
    """
    message: ""
    input:   "{dir}.metaphlan2/{:runs:}_profile.txt"
    output:  "{dir}.metaphlan2/merged_abundance_table.txt"
    log:     "{dir}.metaphlan2/merged_abundance_table.txt.log"
    conda:   srcdir("hhtools.yml")
    threads: 1
    shell: """
    merge_metaphlan_tables.py {input} > {output} 2>{log}
    """

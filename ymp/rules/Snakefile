import os

from ymp.config import icfg
icfg.init()

# make sure rules are executed in bash (not sh, dash or worse)
shell.executable("/bin/bash")

refname = str("({})".format("|".join(icfg.ref)))

wildcard_constraints:
    dir      = "[^/]+?",
    dir1     = "[^/]+",
    dir2     = "[^/]+",
    file     = "[^/]+",

    nodots   = "[^/.]+",
    query    = "[^/.]+",
    gene     = "[^/.]+",

    fracid   = "[0-9][0-9]",
    coverage = "[0-9]+",
    evalue   = "[0-9]+",
    length   = "[1-9][0-9]*",

    SRR = "[EDS]RR[0-9]+",
    project = "({})".format("|".join(icfg.datasets)),
    pairname = "({})".format("|".join(icfg.pairnames)),
    sample   = "(ALL|{})".format("|".join(icfg.allruns)),
    reference = refname,
    refname = refname,
    assembler = "(mh|mhc|sp|trinity|ref_{})".format(refname),
    mapper = "(bt2|bbm)",
    genefind = "(blast)",

    fasta = "(fasta|fna|fa)",
    fastp = "(fastp|faa)",
    fagz  = "(fasta|fna|fa)(|.gz)",
    fqgz  = "(fq)(|.gz)",

    by = "(\.by_[^./]*|)",
    target = "[^/.]+",
    source = "[^/.]+"

for fn in os.listdir(srcdir("")):
    if fn.endswith(".rules") and not fn.startswith("."):
        include: fn

if os.path.exists(icfg.dir.rules):
    for fn in os.listdir(icfg.dir.rules):
        if fn.endswith(".rules") and not fn.startswith("."):
            include: os.path.abspath(os.path.join(icfg.dir.rules, fn))

rule bbmap_partial_coassembly:
    """Map read from each co-assembly read file to the assembly"""
    message:
        "BBMap mapping sample {wildcards.source} to assembly {wildcards.target}"
    input:
        contigs="{dir}{by}.mhc/{target}.contigs.fasta.gz",
        pairs="{dir}/{source}.{: pairnames :}.fq.gz"
    output:
        bam="{dir}{by}.mhc.map/{target}.contigs.{source}.bbmap.bam",
        stats="{dir}{by}.mhc.map/{target}.contigs.{source}.bbmap.stats",
        ihist="{dir}{by}.mhc.map/{target}.contigs.{source}.bbmap.ihist"
    log:
        "{dir}{by}.mhc.map/{source}.contigs.{source}.bbmap.log"
    threads:
        8
    conda:
        srcdir("bbmap.yml")
    shell: """
    bbmap.sh threads={threads} jni pigz unpigz \
             nodisk ref={input.contigs} \
             in={input.pairs[0]} in2={input.pairs[1]} \
             out={output.bam} \
             machineout statsfile={output.stats} \
             ihist={output.ihist} \
             ambiguous=all \
             mdtag \
             trimreaddescriptions \
             >{log} 2>&1
    """
# FIXME: document above options


rule bowtie_index:
    message:
        "Bowtie2: Indexing {input.contigs}"
    input:
        contigs="{dir}/{sample}.contigs.fasta"
    output:
        expand("{{dir}}/{{sample}}.contigs.{ext}",
               ext="1.bt2 2.bt2 3.bt2 4.bt2 rev.1.bt2 rev.2.bt2".split())
    params:
        bt2_base="{dir}/{sample}.contigs"
    threads:
        8
    log:
        "{dir}/{sample}.contigs.btbuild.log"
    conda:
      srcdir("bowtie2.yml")
    shell:"""
    bowtie2-build-s {input.contigs} {params.bt2_base} \
      --threads {threads} >& {log}
    """


rule bowtie_map_partial_coassembly:
    message:
        "Bowtie2: Mapping sample {wildcards.source} to assembly {wildcards.target}"
    input:
        contigs = "{dir}{by}.mhc/{target}.contigs.fasta.gz",
        index   = "{dir}{by}.mhc/{target}.contigs.1.bt2",
        pairs   = "{dir}/{source}.{: pairnames :}.fq.gz"
    output:
        bam     = "{dir}{by}.mhc.map/{target}.contigs.{source}.bowtie2.bam",
        stats   = "{dir}{by}.mhc.map/{target}.contigs.{source}.bowtie2.bt2_stats"
    log:
                  "{dir}{by}.mhc.map/{target}.contigs.{source}.bowtie2.log"
    params:
        bt2_base= "{dir}{by}.mhc/{target}.contigs",
        maxins = 800,
        k = 100
    threads:
        16
    conda:
      srcdir("bowtie2.yml")
    shell:"""
    bowtie2 \
        -x {params.bt2_base} \
        -1 {input.pairs[0]} -2 {input.pairs[1]} \
        -X {params.maxins} \
        --met-file {output.stats} \
        -k {params.k} \
        -p {threads} \
        2>{log} \
        | samtools view -b -o {output.bam} -
    """


rule samtools_sort:
    message:
        "Samtools: Sorting BAM file {input}"
    input:
        "{path}.bam"
    output:
        "{path,.*(?<!.sorted)}.sorted.bam"
    params:
        mem=32
    threads:
        8
    conda:
      srcdir("samtools.yml")
    shell:"""
    samtools sort -m {params.mem}G --threads {threads} -o {output} {input}
    """

rule samtools_index:
    message:
        "Samtools: Indexing BAM file {input}"
    input:
        "{path}.bam"
    output:
        "{path}.bam.bai"
    threads:
        1
    conda:
      srcdir("samtools.yml")
    shell:"""
    samtools index {input}
    """

rule all_mapped:
    input:
        "{dir}.map/{: runs :}.contigs.{mapper}.sorted.bam.bai"
    output:
        "{dir}.map/complete_{mapper}"
    shell:
        "touch {output}"



rule bbmap_partial_coassembly_all_for_target:
    message:
        "Finished mapping for {wildcards.target} with {wildcards.mapper}"
    output:
        "{dir}{by}.mhc.map/complete_{mapper}_{target}"
    input:
        "{dir}{by}.mhc.map/{target}.contigs.{:sources:}.{mapper}.sorted.bam.bai"
    shell:
        "touch {output}"


rule bbmap_partial_coassembly_all:
    message:
        "Finished mapping with {wildcards.mapper} on {wildcards.dir}"
    output:
        "{dir}.mhc.map/complete_{mapper}"
    input:
        "{dir}.mhc.map/complete_{mapper}_{:targets:}"
    shell:
        "touch {output}"

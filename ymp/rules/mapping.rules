"""
Rules for mapping reads to assembly
"""

###
### Meta rules
###

localrules: map_all_for_target
rule map_all_for_target:
    message:
        "Mapping (with {wildcards.mapper})) {wildcards.target} in {wildcards.dir} done"
    input:
        "{dir}.{mapper}/{target}.contigs.{:sources:}.sorted.bam.bai"
    output:
        touch("{dir}.{mapper}/all_{target}")

localrules: map_all
rule map_all:
    message:
        "Mapping (with {wildcards.mapper})) in {wildcards.dir} done"
    input:
        "{dir}.{mapper}/all_{:targets:}"
    output:
        touch("{dir}.{mapper}/all")

###
### Mapping with BBMAP
###

rule bbmap_map:
    """Map read from each (co-)assembly read file to the assembly"""
    message:
        "BBMap mapping sample {wildcards.source} to assembly {wildcards.target}"
    input:
        contigs="{dir}{by}.{assembler}/{target}.contigs.fasta.gz",
        pairs="{dir}/{source}.{: pairnames :}.fq.gz"
    output:
        bam=temp("{dir}{by}.{assembler}.bbm/{target}.contigs.{source}.bam"),
        stats="{dir}{by}.{assembler}.bbm/{target}.contigs.{source}.stats",
        ihist="{dir}{by}.{assembler}.bbm/{target}.contigs.{source}.ihist"
    log:
        "{dir}{by}.{assembler}.bbm/{source}.contigs.{source}.log"
    benchmark:
        "benchmarks/bbmap/{dir}{by}.{assembler}.bbm/{source}.contigs.{source}.txt"
    params:
        mem=icfg.mem("80g")
    threads:
        8
    conda:
        srcdir("bbmap.yml")
    shell:
        "bbmap.sh"
        " threads={threads}"
        " pigz unpigz"          # enable use of pigz for zip/unzip
        # this is disabled because not compiled in conda:
        # " jni"                # use JNI for C alignment algo
        " nodisk "              # don't write index to disk
        " ref={input.contigs}"  # reference
        " in={input.pairs[0]} in2={input.pairs[1]}"
        " out=stdout"           # write sam to stdout
        " machineout statsfile={output.stats}" # parseable stats
        " ihist={output.ihist}" # insert histogram
        " ambiguous=all"        # output all matches
        " mdtag"                # make source recoverable in sam
        " trimreaddescriptions" # use header until space like bowtie2
        " -Xmx{params.mem}m"     # set JVM heap size
        " 2>{log}"              # log error
        " | samtools view -b -o {output.bam} -" # convert to bam


###
### Mapping with Bowtie2
###

BT2IDX_SUFFIXES = "1.bt2 2.bt2 3.bt2 4.bt2 rev.1.bt2 rev.2.bt2".split()

rule bowtie2_index:
    message:
        "Bowtie2: Indexing {input.contigs}"
    input:
        contigs="{dir}/{source}.contigs.fasta.gz"
    output:
        temp(expand("{{dir}}.bt2/{{source}}.contigs.{ext}", ext=BT2IDX_SUFFIXES))
    params:
        bt2_base="{dir}.bt2/{source}.contigs"
    threads:
        8
    log:
        "{dir}.bt2/{source}.contigs.btbuild.log"
    conda:
      srcdir("bowtie2.yml")
    shell:"""
    bowtie2-build-s \
      {input.contigs} \
      {params.bt2_base} \
      --threads {threads} \
      >& {log}
    """


rule bowtie2_map:
    message:
        "Bowtie2: Mapping sample {wildcards.source} to assembly {wildcards.target}"
    input:
        contigs = "{dir}{by}.{assembler}/{target}.contigs.fasta.gz",
        index   = expand("{{dir}}{{by}}.{{assembler}}.bt2/{{target}}.contigs.{ext}",
                         ext=BT2IDX_SUFFIXES),
        pairs   = "{dir}/{source}.{: pairnames :}.fq.gz"
    output:
        bam     = "{dir}{by}.{assembler}.bt2/{target}.contigs.{source}.bam",
        stats   = "{dir}{by}.{assembler}.bt2/{target}.contigs.{source}.stats"
    log:
                  "{dir}{by}.{assembler}.bt2/{target}.contigs.{source}.log"
    params:
        bt2_base= "{dir}{by}.{assembler}.bt2/{target}.contigs",
        maxins = 800,
        k = 100  # max number of secondary alignments
    threads:
        16
    conda:
      srcdir("bowtie2.yml")
    shell:"""
    bowtie2 \
        -x {params.bt2_base} \
        -1 {input.pairs[0]} -2 {input.pairs[1]} \
        -X {params.maxins} \
        --met-file {output.stats} \
        -k {params.k} \
        -p {threads} \
        2>{log} \
        | samtools view -b -o {output.bam} -
    """


###
### Sorting
###

rule sambamba_sort:
    message: "Sambamba: Sorting BAM file {input}"
    input:   "{path}.bam"
    output:  "{path}.sorted.bam",
             "{path}.sorted.bam.bai"
    log:     "{path}.sorted.bam.log"
    benchmark: "benchmarks/sambamba_sort/{path}.txt"
    params:  mem=icfg.mem("32g"),
             compress=6
    threads: 8
    conda: srcdir("sambamba.yml")
    shell:
        "sambamba sort"
        " --memory-limit={params.mem}MB"
        " --compression-level={params.compress}"
        " --nthreads={threads}"
        " {input}"
        " >{log} 2>&1"

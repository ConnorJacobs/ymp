"""
Rules using tools from the BBTools / BBMap suite by Brian Bushnell
"""

# TODO: find way to enable JNI

with Stage("correct_bbmap") as S:
    S.doc("""
    Correct read errors by overlapping inside tails

    Applies BBMap's "bbmerge.sh ecco" mode. This will overlap the inside of
    read pairs and choose the base with the higher quality where the alignment
    contains mismatches and increase the quality score as indicated by the double
    observation where the alignment contains matches.
    """)
    rule bbmap_error_correction:
        """Error correction with BBMerge overlapping"""
        message: "BBMap: applying error correction to {input[0]}"
        input:
            "{:prev:}/{sample}.{:pairnames:}.fq.gz"
        output:
            "{:this:}/{sample}.{:pairnames:}.fq.gz",
            adapter = "{:this:}/{sample}.adapter.fq"
        log:
            "{:this:}/{sample}.log"
        threads: 16
        params:
            inout  = "in={input[0]} out={output[0]}",
            inout2 = "in2={input[1]} out2={output[1]}",
            mem    = icfg.mem("80g")
        conda:
            "bbmap.yml"
        shell: """
        bbmerge.sh {params.inout} {params.inout2} \
                   outadapter={output.adapter} \
                   ecco ecctadpole mix vstrict\
                   threads={threads} -Xmx{params.mem}m \
                   > {log} 2>&1
        """

    # FIXME: Is this applicable?
    rule bbmap_error_correction_se:  # ymp: extends bbmap_error_correction
        input:  ["{:prev:}/{sample}.{:pairnames[0]:}.fq.gz"],
        output: ["{:this:}/{sample}.{:pairnames[0]:}.fq.gz"],
        params: inout2 = ""


with Stage("trim_bbmap") as S:
    S.doc("""
    Trim adapters and low quality bases from reads

    Applies BBMap's "bbduk.sh".

    Parameters:
      A: append to enable adapter trimming
      Q20: append to select phred score cutoff (default 20)
      L20: append to select minimum read length (default 20)
    """)
    rule bbmap_trim:
        """Trimming and Adapter Removal using BBTools BBDuk"""
        message:
            "BBMap: Trimming {input[0]} "
            "({params.adapt}Q={params.qual} L={params.length})"
        wildcard_constraints:
            A = "(A?)",
            Q = "(Q\d+|)",
            L = "(L\d+|)"
        input:
            "{:prev:}/{sample}.{:pairnames:}.fq.gz"
        output:
            "{:this:}{A}{Q}{L}/{sample}.{:pairnames:}.fq.gz"
        log:
            "{:this:}{A}{Q}{L}/{sample}.log"
        params:
            length = lambda wc: wc.L[1:] if wc.L else 20,
            qual   = lambda wc: wc.Q[1:] if wc.Q else 20,
            adapt  = lambda wc: 'ref=$BB_RSRC/adapters.fa ' if wc.A else '',
            k      = 23,
            mink   = 11,
            hdist  = 1,
            mem    = icfg.mem("80g"),
            flags  = "pigz unpigz",
            inout  = "in={input[0]} out={output[0]}",
            inout2 = "in2={input[1]} out2={output[1]}" # overriden by child rule
        threads: 16
        conda:
            "bbmap.yml"
        shell:
            # find adapter dir:
            'BB_RSRC="$(dirname $(readlink -f $(command -v bbduk.sh)))/resources";'
            # run bbduk:
            'bbduk.sh '
            '{params.inout} {params.inout2} '
            'trimq={params.qual} qtrim=r '         # quality trimming
            'minlength={params.length} '           # length filtering
            '{params.adapt}'                       # adapter trimming
            'ktrim=r '                             # 3' side only
            'k={params.k} '                        # k for adapter matching
            'mink={params.mink} '                  # k at read end
            'hdist={params.hdist} '                # hamming distance, allow 1 mismatch
            'tpe ' # trimpairsevenly -- in case adapter detected in only one read
            'tbo ' # trimbyoverlap -- trim if read runs over other reads' end
            '{params.flags} '                      # processing settings
            'threads={threads} '
            '-Xmx{params.mem}m '
            '>{log} 2>&1'

    rule bbmap_trim_se:  # ymp: extends bbmap_trim
        input:
            ["{:prev:}/{sample}.{:pairnames[0]:}.fq.gz"]
        output:
            ["{:this:}{A}{Q}{L}/{sample}.{:pairnames[0]:}.fq.gz"]
        params:
            inout2 = ""


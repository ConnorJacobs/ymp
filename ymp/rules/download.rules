rule download_file:
    message:
        "Downloading {params.url}"
    output:
        "{:dir.downloads:}/{protocol}/{server}/{path}"
    log:
        "{:dir.downloads:}/{protocol}/{server}/{path}.log"
    wildcard_constraints:
        protocol="(http|https|ftp|ftps)",
        server="[^/]+"
    params:
        url="{protocol}://{server}/{path}"
    conda: "wget.yml"
    shell:"""
    wget  "{params.url}" -O "{output[0]}" > {log} 2>&1
    """

ruleorder: download_file > gunzip
ruleorder: download_file > fq2fa


localrules: get_reference_file
rule get_reference_file:
    message: "Preparing {input}"
    input:   lambda wc: icfg.ref[wc.refname],
             refdir = ancient(icfg.dir.references)
    output:  "{:dir.references:}/{refname}.{ftype}.gz"
    wildcard_constraints:
        ftype = "(fasta|gtf)"
    threads: 1
    run:
        if input[0].endswith(".gz"): # just symlink
            if not os.path.isabs(input[0]):
                input[0] = os.path.join("..", input[0])
            os.symlink(input[0], output[0])
        else: # compress
            shell("gzip -c {input[0]} > {output}")


localrules: get_reference_dir
rule get_reference_dir:
    message: "Installing {wildcards.refname} from {input.tar}"
    input:  tar = lambda wc: icfg.ref[wc.refname],
            refdir = ancient(icfg.dir.references)
    output: "{:dir.references:}/{refname}/",
    threads: 1
    shell: """
    rm -rf {output}
    mkdir -p {output}_temp
    tar -xf {input.tar} -C {output}_temp
    if test $(ls -1 {output}_temp | wc -l) -eq 1; then
      mv {output}_temp/* {output}
      rmdir {output}_temp
    else
      mv {output}_temp {output}
    fi
    """
ruleorder: get_reference_dir > gunzip
